name: Deploy to AWS ECS

on:
  push:
    branches: 
      - main
      - feature/terraform-modules # Add this line for the new branch

env:
  AWS_REGION: ap-south-1
  # Use the ECR repository name defined in Terraform (or keep hardcoded if it matches)
  # Verify these names against `terraform output` after applying changes
  ECR_REPOSITORY: hello-world-app # Adjust if var.project_name is different
  ECS_CLUSTER_NAME: hello-world-cluster # Adjust if var.project_name is different
  ECS_SERVICE_NAME: hello-world-service # Adjust if var.project_name is different
  TASK_DEFINITION_FAMILY: hello-world-task

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4 # Use v3 or later

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1 # Consider updating to v2 or later
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 # Consider updating to v2 or later

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest # Or use ${{ github.sha }} for unique tags
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Force new deployment
      run: |
        aws ecs update-service \
        --cluster ${{ env.ECS_CLUSTER_NAME }} \
        --service ${{ env.ECS_SERVICE_NAME }} \
        --force-new-deployment \
        --task-definition ${{ env.TASK_DEFINITION_FAMILY }}
